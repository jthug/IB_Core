package com.lianer.core.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lianer.core.contract.bean.ContractBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTRACT_BEAN".
*/
public class ContractBeanDao extends AbstractDao<ContractBean, Long> {

    public static final String TABLENAME = "CONTRACT_BEAN";

    /**
     * Properties of entity ContractBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ContractId = new Property(0, Long.class, "contractId", true, "_id");
        public final static Property ContractAddress = new Property(1, String.class, "contractAddress", false, "CONTRACT_ADDRESS");
        public final static Property ContractState = new Property(2, String.class, "contractState", false, "CONTRACT_STATE");
        public final static Property BorrowerAddress = new Property(3, String.class, "borrowerAddress", false, "BORROWER_ADDRESS");
        public final static Property InvestorAddress = new Property(4, String.class, "investorAddress", false, "INVESTOR_ADDRESS");
        public final static Property Amount = new Property(5, String.class, "amount", false, "AMOUNT");
        public final static Property Cycle = new Property(6, String.class, "cycle", false, "CYCLE");
        public final static Property Interest = new Property(7, String.class, "interest", false, "INTEREST");
        public final static Property Mortgage = new Property(8, String.class, "mortgage", false, "MORTGAGE");
        public final static Property NeedMortgage = new Property(9, String.class, "needMortgage", false, "NEED_MORTGAGE");
        public final static Property TokenAddress = new Property(10, String.class, "tokenAddress", false, "TOKEN_ADDRESS");
        public final static Property Expire = new Property(11, String.class, "expire", false, "EXPIRE");
        public final static Property EndTime = new Property(12, String.class, "endTime", false, "END_TIME");
        public final static Property InvestmentTime = new Property(13, String.class, "investmentTime", false, "INVESTMENT_TIME");
        public final static Property CreateTime = new Property(14, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ExpiryTime = new Property(15, String.class, "expiryTime", false, "EXPIRY_TIME");
        public final static Property ServiceCharge = new Property(16, String.class, "serviceCharge", false, "SERVICE_CHARGE");
        public final static Property ActualAccount = new Property(17, String.class, "actualAccount", false, "ACTUAL_ACCOUNT");
        public final static Property ContractType = new Property(18, String.class, "contractType", false, "CONTRACT_TYPE");
        public final static Property BorrowerToken = new Property(19, String.class, "borrowerToken", false, "BORROWER_TOKEN");
        public final static Property LenderToken = new Property(20, String.class, "lenderToken", false, "LENDER_TOKEN");
    }


    public ContractBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ContractBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTRACT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: contractId
                "\"CONTRACT_ADDRESS\" TEXT," + // 1: contractAddress
                "\"CONTRACT_STATE\" TEXT," + // 2: contractState
                "\"BORROWER_ADDRESS\" TEXT," + // 3: borrowerAddress
                "\"INVESTOR_ADDRESS\" TEXT," + // 4: investorAddress
                "\"AMOUNT\" TEXT," + // 5: amount
                "\"CYCLE\" TEXT," + // 6: cycle
                "\"INTEREST\" TEXT," + // 7: interest
                "\"MORTGAGE\" TEXT," + // 8: mortgage
                "\"NEED_MORTGAGE\" TEXT," + // 9: needMortgage
                "\"TOKEN_ADDRESS\" TEXT," + // 10: tokenAddress
                "\"EXPIRE\" TEXT," + // 11: expire
                "\"END_TIME\" TEXT," + // 12: endTime
                "\"INVESTMENT_TIME\" TEXT," + // 13: investmentTime
                "\"CREATE_TIME\" TEXT," + // 14: createTime
                "\"EXPIRY_TIME\" TEXT," + // 15: expiryTime
                "\"SERVICE_CHARGE\" TEXT," + // 16: serviceCharge
                "\"ACTUAL_ACCOUNT\" TEXT," + // 17: actualAccount
                "\"CONTRACT_TYPE\" TEXT," + // 18: contractType
                "\"BORROWER_TOKEN\" TEXT," + // 19: borrowerToken
                "\"LENDER_TOKEN\" TEXT);"); // 20: lenderToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTRACT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContractBean entity) {
        stmt.clearBindings();
 
        Long contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindLong(1, contractId);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
 
        String contractState = entity.getContractState();
        if (contractState != null) {
            stmt.bindString(3, contractState);
        }
 
        String borrowerAddress = entity.getBorrowerAddress();
        if (borrowerAddress != null) {
            stmt.bindString(4, borrowerAddress);
        }
 
        String investorAddress = entity.getInvestorAddress();
        if (investorAddress != null) {
            stmt.bindString(5, investorAddress);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String cycle = entity.getCycle();
        if (cycle != null) {
            stmt.bindString(7, cycle);
        }
 
        String interest = entity.getInterest();
        if (interest != null) {
            stmt.bindString(8, interest);
        }
 
        String mortgage = entity.getMortgage();
        if (mortgage != null) {
            stmt.bindString(9, mortgage);
        }
 
        String needMortgage = entity.getNeedMortgage();
        if (needMortgage != null) {
            stmt.bindString(10, needMortgage);
        }
 
        String tokenAddress = entity.getTokenAddress();
        if (tokenAddress != null) {
            stmt.bindString(11, tokenAddress);
        }
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(12, expire);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(13, endTime);
        }
 
        String investmentTime = entity.getInvestmentTime();
        if (investmentTime != null) {
            stmt.bindString(14, investmentTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
 
        String expiryTime = entity.getExpiryTime();
        if (expiryTime != null) {
            stmt.bindString(16, expiryTime);
        }
 
        String serviceCharge = entity.getServiceCharge();
        if (serviceCharge != null) {
            stmt.bindString(17, serviceCharge);
        }
 
        String actualAccount = entity.getActualAccount();
        if (actualAccount != null) {
            stmt.bindString(18, actualAccount);
        }
 
        String contractType = entity.getContractType();
        if (contractType != null) {
            stmt.bindString(19, contractType);
        }
 
        String borrowerToken = entity.getBorrowerToken();
        if (borrowerToken != null) {
            stmt.bindString(20, borrowerToken);
        }
 
        String lenderToken = entity.getLenderToken();
        if (lenderToken != null) {
            stmt.bindString(21, lenderToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContractBean entity) {
        stmt.clearBindings();
 
        Long contractId = entity.getContractId();
        if (contractId != null) {
            stmt.bindLong(1, contractId);
        }
 
        String contractAddress = entity.getContractAddress();
        if (contractAddress != null) {
            stmt.bindString(2, contractAddress);
        }
 
        String contractState = entity.getContractState();
        if (contractState != null) {
            stmt.bindString(3, contractState);
        }
 
        String borrowerAddress = entity.getBorrowerAddress();
        if (borrowerAddress != null) {
            stmt.bindString(4, borrowerAddress);
        }
 
        String investorAddress = entity.getInvestorAddress();
        if (investorAddress != null) {
            stmt.bindString(5, investorAddress);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(6, amount);
        }
 
        String cycle = entity.getCycle();
        if (cycle != null) {
            stmt.bindString(7, cycle);
        }
 
        String interest = entity.getInterest();
        if (interest != null) {
            stmt.bindString(8, interest);
        }
 
        String mortgage = entity.getMortgage();
        if (mortgage != null) {
            stmt.bindString(9, mortgage);
        }
 
        String needMortgage = entity.getNeedMortgage();
        if (needMortgage != null) {
            stmt.bindString(10, needMortgage);
        }
 
        String tokenAddress = entity.getTokenAddress();
        if (tokenAddress != null) {
            stmt.bindString(11, tokenAddress);
        }
 
        String expire = entity.getExpire();
        if (expire != null) {
            stmt.bindString(12, expire);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(13, endTime);
        }
 
        String investmentTime = entity.getInvestmentTime();
        if (investmentTime != null) {
            stmt.bindString(14, investmentTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(15, createTime);
        }
 
        String expiryTime = entity.getExpiryTime();
        if (expiryTime != null) {
            stmt.bindString(16, expiryTime);
        }
 
        String serviceCharge = entity.getServiceCharge();
        if (serviceCharge != null) {
            stmt.bindString(17, serviceCharge);
        }
 
        String actualAccount = entity.getActualAccount();
        if (actualAccount != null) {
            stmt.bindString(18, actualAccount);
        }
 
        String contractType = entity.getContractType();
        if (contractType != null) {
            stmt.bindString(19, contractType);
        }
 
        String borrowerToken = entity.getBorrowerToken();
        if (borrowerToken != null) {
            stmt.bindString(20, borrowerToken);
        }
 
        String lenderToken = entity.getLenderToken();
        if (lenderToken != null) {
            stmt.bindString(21, lenderToken);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContractBean readEntity(Cursor cursor, int offset) {
        ContractBean entity = new ContractBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // contractId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contractAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contractState
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // borrowerAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // investorAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // amount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cycle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // interest
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mortgage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // needMortgage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tokenAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // expire
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // endTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // investmentTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // createTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // expiryTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // serviceCharge
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // actualAccount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // contractType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // borrowerToken
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // lenderToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContractBean entity, int offset) {
        entity.setContractId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContractAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContractState(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBorrowerAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInvestorAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAmount(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCycle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInterest(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMortgage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNeedMortgage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTokenAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExpire(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEndTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setInvestmentTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCreateTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setExpiryTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setServiceCharge(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setActualAccount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setContractType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBorrowerToken(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLenderToken(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContractBean entity, long rowId) {
        entity.setContractId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContractBean entity) {
        if(entity != null) {
            return entity.getContractId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContractBean entity) {
        return entity.getContractId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
